apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

def mainClass='de.lisaplus.tools.xsd2json.Xsd2JsonSchema'

project.group = 'de.lisaplus.tools'
project.version = '0.1-SNAPSHOT'
def releaseArchiveName = "xsd2jsonSchema_${project.version}.zip"

/*
 * the following attributes need to be declared in $HOME/.gradle/gradle.properties
    mavenReleaseRepo=http://localhost:8081/content/repositories/releases
    mavenSnapshotRepo=http://localhost:8081/content/repositories/snapshots
    mavenUser=admin
    mavenUserPwd=admin123
    mavenBaseRepo=http://localhost:8081/content/groups/public
 **/
publishing {
    publications {
        libraryJar(MavenPublication) {
            from components.java
            artifact zipRelease
        }
    }
    repositories {
        maven {
            url "${project.version.endsWith('-SNAPSHOT') ? mavenSnapshotRepo : mavenReleaseRepo }"
            credentials {
                username = "${mavenUser}"
                password = "${mavenUserPwd}"
            }
        }
    }
}

repositories {
    mavenLocal()
    maven {
        url "${mavenBaseRepo}"
    }
    mavenCentral()
}

artifacts {
    archives jar
    archives file: new File("$releaseArchiveName"), name: 'xsd2jsonSchema', type: 'zip'
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    compile group: 'com.beust', name: 'jcommander', version: '1.82'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.codehaus.groovy:groovy-all:2.4.21'
    compile group: 'com.kjetland', name: 'mbknor-jackson-jsonschema_2.11', version: '1.0.39'
    testCompile group: 'junit', name: 'junit', version: '4.13.2'
}

clean {
    delete "${buildDir}/release"
}

task dependenciesToLibDir(type: Copy) {
    into "$buildDir/release/lib"
    from configurations.runtime
}

task buildRelease (type: Copy) {
    into "${buildDir}/release/lib"
    from "${buildDir}/libs"

    copy {
        from "${project.rootDir}/src/main/resources/bin"
        into "${buildDir}/release"
    }
    copy {
        from "${project.rootDir}/src/main/resources/conf"
        into "${buildDir}/release/conf"
    }
}

task zipRelease (type: Zip) {
    from "${buildDir}/release"
    include '*'
    include '*/*'
    archiveName "$releaseArchiveName"
    destinationDir(file("${buildDir}"))
}

task myRun (type: JavaExec, dependsOn: classes){
    if(project.hasProperty('myArgs')){
        args(myArgs.split(','))
    }
    if (project.hasProperty('DEBUG')) {
        jvmArgs '-Xdebug',
                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
}

dependenciesToLibDir.dependsOn jar
buildRelease.dependsOn dependenciesToLibDir


configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration_test/java')
        }
        /* not needed this time
        resources.srcDir file('src/integration-test/resources')
        */
    }
}

task integrationTest(type: Test) {
    doFirst {
        // that's the place to init integration tests
    }

    doLast {
        // that's the place to tidy up test integration environment
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
buildRelease.dependsOn test
zipRelease.dependsOn buildRelease
